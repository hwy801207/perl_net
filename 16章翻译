问题：
    运行一个程序，捕获程序的输出

解决办法:
    backticks
    标量上下文
    $output = `program args`; #如果是多行就会拼接成一行
    
    列表上下文
    @output = `program args`; #多行保存在一个数组中

    或者
    open my $fh, "-|", "program", @args
        or die "Can't run program: $!\n";
    while(<$fh>) {
        $output .= $_;
    }

    close $fh;

讨论:
    私用backticks 是一种捕获程序输出的简便方法，但是这种方法会导致程序退出才能退出backticks，这在有些收集输出的情况下是低效的，比如
    `fsync -y /dev/rsdl1`
    无法动态的获取磁盘检查与修复的结果，必须等到fsync完成后你才能看到结果

    并且backticks是通过shell来完成程序的运行的， 在特权用户下，容易出现安全问题，好处是可以使用shell的通配符等特性

    @files = `ls -l /music/*.mp3`;

    如果你想在程序运行的时候就能获取输出，而不是等运行结束后才获取输出，可以这样做：
    open(my $fd, "ls -l /music/*.mp3 |") or die "Can't run program: $!\n";
    while (<$fd>) {
        # print or some other operation to $_
    }
    close $fd;

    在perl 5.8 以前你只能使用带有2个参数的open函数，如果你的perl版本比5.8早，请使用如下形式
    open(OUTPUT, "ls @args |") or die "Can't run program: $!\n";

    下面用更底层的技术来实现这个功能： pipe 进程间通信， fork 创建子进程， exec 完成子进程的替换

    use POSIX qw/:sys_wait_h/;

    my ($readme, $writeme);
    pipe $readme, $writeme;
    if (my $pid = fork) {
        # 父进程
        $SIG{CHLD} = sub { 1 while waitpid(-1, WNOHANG) > 0 };
        close $writeme;   
    }
    else {
        die "Can't fork child:$!" unless defined $pid;
        #child
        open(STDOUT, ">&=", $writeme) or die "Can't redirect STDOUT:$!\n";
        close $readme;
        exec($program, $arg1, $arg2)  or die "Can't run $program: $!\n";
    }

    my $string;
    while (<$readme>) {
        $string .= $_;
    }

    close $readme;

没有什么理由非要用这么底层的技术实现输出捕获，应该尽可能使用"-|" 来完成输出的捕获。但是，有时候，比如你希望子进程能忽略Ctrl+C 那你可能需要使用底层技术来
捕获INT信号，默认情况下子进程继承父进程的信号处理函数，所以Ctrl+C的时候也是影响子进程的。

16.2 运行另外一个程序
    问题：
        用一个程序，运行另外一个程序，直到它结束，然后继续主进程。另外一个程序是与主进程共享STDIN STDOUT 和STDERR的
    解决方案
        使用system 调用shell 来执行参数中的程序
        system("vim $myfile");
        如果不想通过shell来运行程序
        $statue = system("vim", "$myfile");
    
    讨论：
    system函数是运行程序最简单的方式，它不捕获输出，它返回执行程序的退出状态。当调用程序执行的时候，主程序会阻塞，这个时候调用程序可以利用STDIN，STDOUT来完成交互
    当单参数形式的时候，system调用shell来执行程序，所以可以在shell中重定向程序的输入与输出
    system("cmd1 args|cmd2|cmd3>outfile");
    system("cmd1 args <  infile > outfile 2> errfile");

    为了避免调用shell可以使用列表参数形式的system
    $statue = system($program, $arg1, $arg2)
        die "$program exited funny: $?" unless $statue == 0;

    system的返回值不知包括程序的退出值，也包括导致进程退出时的信号值，参考章节16.19 如何获取程序退出的信号值

   当子进程运行的时候，system函数忽略SIGINT和 SIGQUIT信号,这就意味着这些信号只对子进程有效。通过检查system的返回值或者$?变量，你可以让你的主进程平滑退出

   if (($signo = system(@arglist)) &= 127) {
       die "program killed by signal $signal\n";
   }

   利用fork 和 exec 通过定义自己的信号处理函数，可以模拟system调用对SIGINT 信号的忽略

   if ($pid = fork) {
       local $SIG{INT} = sub { print "Task tsk, no process interrupts\n"};
       waitpid($pid, 0);
   }
   else {
       die "for subprocess failed: $!\n" unless defined $pidl
       $SIG{INT} = "IGNORE";
       exec("summarize", "/etc/logfiles") or die "Can't exec: $!\n";
   }

   少数程序会检查他们的程序名称。Shell会查看自己被调用的时候是否会以“-”开头，这意味着交互式运行。 第18章的expn如果被当做vrfy调用会有截然不同的行为。如果vrfy被安装到不同的两个地方
   这就是为啥$0有可能并不是被调用程序的真实路径的原因。你有可能被多种方式欺骗

   如果你想对你的程序撒个小谎，告诉它你执行的程序跟它的名字是一致的，可以在system 的参数列表前面加上真实的路径信息（对exec也是相同的）, 这个参数的后面是不需要逗号的，跟
   printf 输出到句柄的形式一样 或者 类似于间接对象方法调用的形式(new Object 而不是 Object->new这样的形式)

   $shell = '/bin/tcsh';
   system $shell  '-csh'; # pretend is's a login shell

   或者更加直接的方式
   system {‘/bin/tcsh’} '-csh'  

   在下面的例子中，程序的真实路径通过间接形式调用 {'/home/tchrist/scripts/expn'}. 'vrfy' 被当做程序的参数，而$0 存储程序的名称
   # call expn as vrfy
   system {'/home/tchrist/scripts/expn'} 'vrfy', @ADDRESSES;

   使用system的间接调用形式也更安全。这种用法把参数强制的解释为多值的列表，甚至这个参数只有一个值的情况，这避免了shell的通配符扩展，甚至对于有空格的情况也是当做一个
   参数

   @args = ("echo surprise");
   system @args;
   system {$args[0]} @args;

   第一种情况下，程序输出 surprise 而第二种情况下， @args 直接被当做一个程序执行，然后找不到运行失败，设置$?为一个非0值表示失败

   参考 18 章的程序
